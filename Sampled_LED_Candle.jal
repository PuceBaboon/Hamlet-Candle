
--
--   $Id: Sampled_LED_Candle.jal,v 1.8 2014/03/26 00:55:45 anoncvs Exp $
--

--
-- Based on:-
--
--  Pete Mills' original ATTiny85, sampled candle:-
--  	petemills.blogspot.com/2012/02/attiny-candle.html
--
--  Martin Harizanov's "FunkyLED_candle":-
--  http:--harizanov.com/2012/12/funky-led-candle
--
--  The flicker-table is composed of data sampled from a real candle using
--  an LDR as a sensor.
--


-- Specify target processor type.
include 12f683


-- Use internal oscillator at 8MHz
pragma target CLOCK	8_000_000;
pragma target OSC	INTOSC_NOCLKOUT;
pragma target WDT	disabled;
OSCCON_IRCF		= 0b_111;		-- 8MHz.

enable_digital_io();				-- Initialize all I/O pins to digital.


-- Fuses section.
pragma target OSC	INTOSC_NOCLKOUT		-- Use internal clock source, no clock-output.
pragma target WDT	DISABLED		-- Disable watchdog.
pragma target PWRTE	DISABLED		-- Disable power-up timer.
pragma target IESO	DISABLED		-- Disable two-speed start-up.
pragma target BROWNOUT	DISABLED		-- Disable brown-out detection.
pragma target MCLR	INTERNAL		-- R/C reset circuitry -not- present on -MCLR.


-- PWM setup -------
include delay;					-- JALLIB: Timer/Delay Library.
include pwm_hardware;				-- JALLIB: PWM Library.
pwm_max_resolution(4);				-- Set to high resolution output (pre-scalar = 4).
pin_CCP1_direction	= output;
pin_A0_direction	= output;
pin_A1_direction	= output;
pin_A3_direction	= output;

--
-- Constant and variable definitions.
--
--   NOTE:- The byte constant, flicker_data[], has an internal limit of 1kB. 
--          You can add more data, but it will be silently truncated at
--          compile time.
--
var word max_counter		= 0;
var word counter		= 0;
const byte flicker_time		= 60;		-- Display time (in ms) for each flicker state.
const byte flicker_data[]	= {    
0x77,	0x7B,	0x7D,	0x7B,	0x78,	0xBA,	0x95,	0x53,	0x5E,	0x3E,	0x3E,	0x43,	0x52,	0x35,	0x3E,	0x75,	0x95,
0x4B,	0x65,	0x7B,	0x52,	0x63,	0x58,	0x6B,	0x55,	0x62,	0x77,	0x72,	0x87,	0x85,	0x8C,	0x5D,	0x7A,	0x2E,
0x53,	0x5D,	0x50,	0x62,	0x55,	0x6F,	0x67,	0x58,	0x78,	0x4E,	0x55,	0x95,	0x6B,	0x6D,	0x7D,	0x73,	0x73,
0x7D,	0x5B,	0x6B,	0x68,	0x6A,	0x6A,	0x60,	0x6B,	0x77,	0x77,	0x98,	0x7A,	0x87,	0x60,	0x5B,	0x6B,	0xC9,
0x53,	0x4A,	0x53,	0x68,	0x45,	0x3B,	0x65,	0x67,	0x9C,	0x60,	0x67,	0x53,	0x73,	0x75,	0x63,	0x8A,	0x81,
0x7F,	0x83,	0x88,	0x80,	0x63,	0x58,	0x58,	0x6B,	0x7A,	0x78,	0x7B,	0x83,	0x8A,	0x87,	0x8A,	0x85,	0x08,
0x83,	0x88,	0x8A,	0x8A,	0x8A,	0x8A,	0x8A,	0x8C,	0x8A,	0x8A,	0x8A,	0x8A,	0x8A,	0x88,	0x83,	0x7F,	0x0B,
0x7D,	0x7B,	0x7A,	0x78,	0x77,	0x75,	0x70,	0x70,	0x72,	0x70,	0x70,	0x4D,	0x41,	0x6D,	0x68,	0x60,	0xB5,
0x35,	0x35,	0x3D,	0x3B,	0x41,	0x45,	0x52,	0x5E,	0x41,	0x53,	0x5D,	0x60,	0x65,	0x6A,	0x50,	0x48,	0xA0,
0x4B,	0x4E,	0x35,	0x35,	0x31,	0x33,	0x33,	0x36,	0x3B,	0x40,	0x50,	0x4E,	0x52,	0x5D,	0x60,	0x53,	0x15,
0x56,	0x4B,	0x35,	0x2D,	0x2E,	0x2E,	0x35,	0x38,	0x38,	0x39,	0x3B,	0x38,	0x31,	0x58,	0x40,	0x60,	0x77,
0x4D,	0x50,	0x5A,	0x5D,	0x43,	0x40,	0x53,	0x58,	0x5A,	0x55,	0x4E,	0x31,	0x31,	0x2B,	0x2E,	0x33,	0xD3,
0x31,	0x36,	0x35,	0x36,	0x38,	0x39,	0x39,	0x38,	0x40,	0x4A,	0x41,	0x3B,	0x50,	0x62,	0x40,	0x36,	0x4E,
0x29,	0x2D,	0x45,	0x5E,	0x5D,	0x52,	0x3E,	0x33,	0x3B,	0x43,	0x35,	0x45,	0x38,	0x35,	0x31,	0x33,	0x3E,
0x36,	0x36,	0x39,	0x36,	0x38,	0x3B,	0x41,	0x36,	0x36,	0x30,	0x39,	0x33,	0x2B,	0x29,	0x33,	0x5A,	0x98,
0x63,	0x56,	0x41,	0x3D,	0x50,	0x52,	0x55,	0x60,	0x65,	0x55,	0x3B,	0x30,	0x2E,	0x30,	0x3B,	0x4E,	0x66,
0x36,	0x2E,	0x2B,	0x3B,	0x39,	0x3D,	0x4A,	0x50,	0x3D,	0x45,	0x58,	0x4E,	0x4B,	0x4E,	0x4A,	0x45,	0xC5,
0x58,	0x4B,	0x55,	0x5D,	0x5B,	0x56,	0x58,	0x5E,	0x60,	0x77,	0x5E,	0x38,	0x5A,	0x52,	0x46,	0x4B,	0x79,
0x50,	0x4A,	0x4A,	0x35,	0x4E,	0x41,	0x2E,	0x36,	0x36,	0x38,	0x52,	0x4B,	0x46,	0x3B,	0x33,	0x40,	0xC4,
0x4E,	0x60,	0x5A,	0x50,	0x4D,	0x43,	0x4A,	0x50,	0x4B,	0x48,	0x40,	0x3D,	0x40,	0x46,	0x52,	0x5B,	0xFA,
0x62,	0x63,	0x63,	0x5B,	0x52,	0x46,	0x5B,	0x43,	0x55,	0x45,	0x26,	0x35,	0x3B,	0x5B,	0x43,	0x4D,	0xDB,
0x40,	0x56,	0x58,	0x5A,	0x5D,	0x50,	0x46,	0x45,	0x45,	0x41,	0x3B,	0x43,	0x72,	0x87,	0x90,	0x8A,	0x08,
0x8F,	0x97,	0x9D,	0x95,	0x73,	0x65,	0x6B,	0x4D,	0x46,	0x45,	0x55,	0x55,	0x41,	0x56,	0x55,	0x55,	0x31,
0x56,	0x5A,	0x5A,	0x5B,	0x5E,	0x56,	0x62,	0x55,	0x65,	0x58,	0x5A,	0x62,	0x68,	0x6D,	0x6D,	0x6B,	0x89,
0x68,	0x6A,	0x6F,	0x65,	0x6D,	0x31,	0x6F,	0x55,	0x48,	0x50,	0x55,	0x67,	0x5A,	0x41,	0x55,	0x5E,	0xC5,
0x60,	0x65,	0x68,	0x68,	0x63,	0x60,	0x6A,	0x60,	0x67,	0x6A,	0x7F,	0x83,	0x8C,	0x87,	0x88,	0x92,	0x3D,
0x8D,	0x8F,	0x88,	0x8C,	0x8C,	0x85,	0x82,	0x6A,	0x4E,	0x35,	0x23,	0x11,	0x19,	0x43,	0x3B,	0x41,	0x93,
0x67,	0x4A,	0x4A,	0x3B,	0x2E,	0x30,	0x45,	0x41,	0x4A,	0x58,	0x48,	0x70,	0x5B,	0x6D,	0x72,	0x62,	0x2F,
0x75,	0x67,	0x56,	0x5A,	0x5E,	0x55,	0x4D,	0x77,	0x53,	0x2D,	0x36,	0x41,	0x5D,	0x55,	0x40,	0x40,	0x03,
0x40,	0x40,	0x40,	0x3E,	0x41,	0x5E,	0x82,	0x92,	0x88,	0x88,	0x90,	0x94,	0x88,	0x85,	0x7B,	0x63,	0x4F,
0x55,	0x53,	0x56,	0x55,	0x50,	0x53,	0x55,	0x03,	0x34,	0x01,	0x3A,	0x7E,	0xFF,	0x01,	0x60,	0x3E,	0x36
};
                             

--
--  Forever.  Dedication, PIC style.
--
max_counter=count(flicker_data);
forever loop
	pwm1_set_dutycycle_ratio(flicker_data[counter] * 4)		-- Change the PWM ratio to the next flicker "state".
									-- This only changes pin_CCP1 (where our LED is attached).
	counter = counter + 1;
	if(counter > max_counter ) then
		counter = 0;
	end if
	delay_1ms(flicker_time);					-- Delay between flicker "states".
end loop
